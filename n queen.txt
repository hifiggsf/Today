def print_board(board):
    for row in board:
        print(" ".join("Q" if x else "." for x in row))
    print()

def is_safe(board, row, col, n):
    for i in range(col):
        if board[row][i] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    for i, j in zip(range(row, n), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    return True

def solve_nqueens(board, col, n):
    if col >= n:
        return True
    for row in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1
            if solve_nqueens(board, col + 1, n):
                return True
            board[row][col] = 0
    return False

def nqueens(n, first_row, first_col):
    board = [[0] * n for _ in range(n)]
    board[first_row][first_col] = 1
    if solve_nqueens(board, first_col + 1, n):
        print_board(board)
    else:
        print("No solution exists")

n = int(input("Enter the size of the board (n): "))
first_row = int(input("Enter the row for the first Queen (0-indexed): "))
first_col = int(input("Enter the column for the first Queen (0-indexed): "))

nqueens(n, first_row, first_col)